model Eventid {
  name = "eventids"

  event_id    id        @primary
  created_at  datetime  
}

model Migrate {
  name = "migrate"

  version  int  @primary
}

model Post {
  name = "posts"

  id          int        @primary @sequence
  created_at  datetime   
  reports     Report[]?  
  standup     Standup    
  updated_at  datetime   
}

model Question {
  name = "questions"

  id          int       @primary @sequence
  created_at  datetime  
  order       int       
  question    string    
  standup     Standup   
  updated_at  datetime  
}

model Report {
  name = "reports"

  id          int           @primary @sequence
  created_at  datetime      
  post        Post?         
  questions   json          
  standup     Standup       
  status      ReportStatus  
  updated_at  datetime      
  user        User          
}

enum ReportStatus {
  ASKED
  COMPLETE
  PENDING
  SKIP
}

model Review {
  name = "reviews"

  id          int         @primary @sequence
  created_at  datetime    
  text        string      
  type        ReviewType  
  user        User        
}

enum ReviewType {
  COMMENT
  EXIT_FEEDBACK
  REFERRED_BY
}

model Standup {
  name = "standups"

  id              int             @primary @sequence
  channel_id      string          
  created_at      datetime        
  is_threaded     boolean         @default(false)
  name            citext          
  posts           Post[]          
  questions       Question[]      
  reports         Report[]        
  standups_users  StandupsUser[]  
  team            Team            
  time            time            
  timezone        string          
  updated_at      datetime        
}

enum StandupUserStatus {
  ACTIVE
  INACTIVE
  INVITED
}

model StandupsUser {
  name = "standups_users"

  created_at        datetime           
  is_standup_owner  boolean            @default(false)
  standup           Standup()          
  status            StandupUserStatus  
  time              time               
  updated_at        datetime           
  user              User()             
}

model Team {
  name = "teams"

  id                    int         @primary @sequence
  bot_access_token      string      @unique
  bot_slack_id          string      
  cost_per_user         int         @default(100)
  created_at            datetime    
  minimum_monthly_cost  int         @default(0)
  scope                 string      @default({})
  standups              Standup[]   
  status                TeamStatus  
  stripe_id             string?     
  team_access_token     string      @unique
  team_name             string      
  team_slack_id         string      @unique
  trial_ends            datetime    
  updated_at            datetime    
  users                 User[]      
}

enum TeamStatus {
  ACTIVE
  DELINQUENT
  INACTIVE
}

model User {
  name = "users"

  id              int             @primary @sequence
  avatar_url      string?         
  created_at      datetime        
  email           string?         
  first_name      string?         
  is_team_owner   boolean         @default(false)
  last_name       string?         
  reports         Report[]        
  reviews         Review[]        
  slack_id        string          
  standups_users  StandupsUser[]  
  team            Team            
  timezone        string          
  updated_at      datetime        
  username        string          
}
